name: Release Workflow

on:
    push:
        branches: [ "master", "dev" ]


jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore VeeamHealthCheck.csproj
      working-directory: vHC/HC_Reporting

    - name: Build
      run: dotnet build VeeamHealthCheck.csproj --configuration Release --no-restore
      working-directory: vHC/HC_Reporting

    - name: Run tests
      run: dotnet test VeeamHealthCheck.csproj --no-restore --verbosity normal
      working-directory: vHC/HC_Reporting



  release:
    needs: build
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2



    - name: Publish project
      run: dotnet publish VeeamHealthCheck.csproj -c Release -o ./publish --runtime "win-x64" --self-contained -p:PublishSingleFile=true -p:UseAppHost=true -f "net8.0-windows7.0"
      working-directory: vHC/HC_Reporting

    - name: Zip published files
      id: zip_files
      run: |
        $version = (Get-Command D:\a\veeam-healthcheck\veeam-healthcheck\vHC\HC_Reporting\publish\VeeamHealthCheck.exe).FileVersionInfo.FileVersion
        Write-Host("Version: $version")
        gci D:\a\veeam-healthcheck\veeam-healthcheck\vHC\HC_Reporting\publish\
        mkdir D:\a\publish
        gci D:\a\
        Compress-Archive -Path D:\a\veeam-healthcheck\veeam-healthcheck\vHC\HC_Reporting\publish\* -DestinationPath D:\a\publish\VeeamHealthCheck-$version.zip
        gci D:\a\publish
        echo "::set-output name=version::$version"
        $hash = Get-FileHash -Path D:\a\publish\VeeamHealthCheck-$version.zip -Algorithm SHA256
        echo "::set-output name=sha256::$($hash.Hash)"
        $hash

      shell: pwsh

    - name: Debug File Path
      run: |
        echo "Checking if file exists..."
        if (Test-Path "D:\a\publish\VeeamHealthCheck-${{ steps.zip_files.outputs.version }}.zip") {
          echo "File exists."
        } else {
          echo "File does not exist."
        }
      shell: pwsh

    - name: VirusTotal Scan
      uses: crazy-max/ghaction-virustotal@v4
      with:
        vt_api_key: ${{ secrets.VIRUSTOTAL_API_KEY }}
        vt_monitor: true
        files: "D:\\a\\publish\\VeeamHealthCheck-${{ steps.zip_files.outputs.version }}.zip"
        


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        release_name: Release v1.0.${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: D:\a\publish\VeeamHealthCheck-${{ steps.zip_files.outputs.version }}.zip
        asset_name: VeeamHealthCheck-${{ steps.zip_files.outputs.version }}.zip
        asset_content_type: application/zip

    - name: Update GitHub Release with SHA256
      run: |
        $version = "${{ steps.zip_files.outputs.version }}"
        $sha256 = "${{ steps.zip_files.outputs.sha256 }}"
        $release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/$version | jq -r '.id')
        $body="SHA256 Hash: $sha256"
        curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"body\": \"$body\"}" https://api.github.com/repos/${{ github.repository }}/releases/$release_id
      shell: pwsh